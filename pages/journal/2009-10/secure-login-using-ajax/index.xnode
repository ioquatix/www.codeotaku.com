<content:entry>
	<p>A website is only as secure as its weakest link. We should assume that an attacker has access to everything that is on the server. To this end, transmitting the password to a server in clear text isn't such a great idea.</p>
	
	<p>It is possible to minimise the chance of a password being intercepted by simply not transmitting it at all, and instead sending a <a href="https://en.wikipedia.org/wiki/Digest_access_authentication">password digest</a>. SHA can be used on the client-side to produce a password digest along with a random <a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nounce</a> to prevent replay attacks.</p>
	
	<p>If the client doesn't have JavaScript, it simply supplies the password (as per what is typical).</p>
	
	<div class="centered"><img src="secure_login.png" /></div>
	
	<p>This diagram shows the basic of a secure hashing login system, which can be easily implemented.</p>
	
	<h2>Client Side</h2>
	
	<p>Here is a client using jQuery. The login hash is retrieved from the server using AJAX.</p>
	
	<content:listing src="client_form.txt" lang="html" />
	
	<h2>Server Side</h2>
	
	<p>The database I am using as an example is for email accounts. It is slightly more complicated than a typical example.</p>
	
	<content:listing src="server_datamapper.txt" lang="ruby" />
	
	<p>Here is a server using <a href="https://en.wikipedia.org/wiki/Ramaze">Ramaze</a>.</p>
	
	<content:listing src="server_ramaze.txt" lang="ruby" />
	
	<p>Finally, it is important to remember that this approach is not inherently secure. It is just one option to ensure that password does not travel in clear text. I highly recommend this article by Troy Hunt "<a href="http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html">Our password hashing has no clothes</a>" which discusses the risk of using SHA for password hashing. I personally recommend using <a href="https://en.wikipedia.org/wiki/BCrypt">BCrypt</a>.</p>
</content:entry>