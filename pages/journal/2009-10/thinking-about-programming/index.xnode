<content:entry>
	<p>I have been working on a <a href="http://gigamonkeys.com/book/">LISP</a>-like environment. At some point you have to wonder, what is the right level of <a href="https://en.wikipedia.org/wiki/Programming_paradigm">abstraction and terminology</a> to solve technical problems. The LISP <a href="https://en.wikipedia.org/wiki/REPL">REPL</a> is a great example of meta programming that I admire.</p>

	<p>Rich Hickey's <a href="http://wiki.jvmlangsummit.com/images/a/ab/HickeyJVMSummit2009.pdf">presentation</a> provides an interesting perspective on where we currently stand with regards overall approach and technique. It seems like he believes that current programming languages are not providing the right set of functionality to solve modern programming problems.</p>

	<p>I personally believe that a programming language needs to be concise. This is not only with respect to the terminology (syntax), but also that the design and usage of data should match effectively to the most typical requirements. For example iterating over a set of items in C++ is generally very difficult.</p>

	<content:listing src="iterate_cpp.txt" brush="clang" />

	<p>In this example, there is much <a href="http://www.pphsg.org/cdsmith/types.html">type annotation</a> which can be inferred and complex syntax which doesn't actually add anything to the solution. Here is the "same idea" written in Ruby</p>

	<content:listing src="iterate_rb.txt" brush="ruby" />
	
	<p>This is much more concise, and represents functionality that is far more abstract and this behaviour can work on lists of anything that support the required functionality. While Ruby (i.e. <a href="https://en.wikipedia.org/wiki/Ruby_MRI">MRI</a>) runs this dynamically, there is no reason why it couldn't be compiled using type inference, optimization, and so on. And compilation is just an optimization step anyway.</p>

	<p><em>N.B.</em> Certainly compiled languages generally have the performance edge in the real world at this point in time. I've moved projects from Ruby to C after benchmarks have shown logarithmic performance problems.</p>

	<p>Tim Sweeny is a game programmer and his <a href="http://lambda-the-ultimate.org/node/1277">presentation</a> is a fascinating real world perspective on what kind of features could be useful in a programming language; many which are currently not generally available in typical environments. It is always important to be humble when dealing with both theoretical and practical concerns, since while often in alignment, there are typically many differences. I think some of his ideas are certainly worth investigating.</p>

	<p>While working on my own programming languages, I've encountered many different possibilities and techniques. I really enjoyed <a href="http://gnuu.org/2009/09/18/writing-your-own-toy-compiler/">Writing your own toy compiler</a>. The cost of entry into building your own language and compiler is so low these days that anyone with a new idea can try it out and produce a useful environment for solving problems. I personally think this is fantastic.</p>

	<p>Programming languages make me excited because of the possibilities and implications. We are so lucky to be in an age where all this is accessible and I look forward to future and all the different programming languages that people are creating.</p>
</content:entry>