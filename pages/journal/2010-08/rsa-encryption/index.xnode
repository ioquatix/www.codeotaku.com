<content:entry>
	<p>I have implemented RSA encryption and decryption using C++, along with support functions such as key generation. This implementation is purely academic and does not take into consideration many important real-world security issues. Several of the multiple precision integer algorithms were developed and implemented from the book <a href="http://www.cacr.math.uwaterloo.ca/hac/">Handbook of Applied Cryptography</a>. I wrote <a href="Multiple Precision RSA Implementation Documentation.pdf">some documentation</a> for my implementation, which may be helpful if you are making your own implementation.</p>
	
	<p>This implementation supports both single precision and multiple precision (a.k.a. big integer) mathematics. Several optimised functions are implemented including Barrett Modular Reduction.</p>
	
	<p>This code is suitable for key size up to 1024 bits on modern computer.</p>
	
	<h2>Multiplication by Repeated Doubling</h2>
	
	<p>The multiple precision implementation contains a unique division algorithm by repeated doubling.</p>
	
	<content:listing src="division.txt" brush="c++" />
	
	<p>The main benefit of this approach is that it only uses additions and shifts to perform division. This algorithm can probably be extended to support multi-core implementation and is very robust.</p>
	
	<p>This diagram shows the process going on inside the algorithm when computing <em>30/5</em>.</p>
	
	<div class="centered">
		<img src="division.png" alt="Division by repeated doubling." />
	</div>
	
	<p>I suspect that the ramping up happens in logaritmic time, but on the way down we zig-zag many times, possibly as bad as linear time. I wonder if its possible to improve this? It might be possible to cache the results on the way back to avoid oscilations.</p>
	
	<h2>Usage</h2>
	
	<p>The <a href="https://github.com/ioquatix/rsa">source code</a> is available as an Xcode project. This project may not be reproduced except for personal use.</p>
</content:entry>