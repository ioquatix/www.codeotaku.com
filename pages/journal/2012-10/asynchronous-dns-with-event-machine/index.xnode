<content:entry>
	<p>DNS resolution in a typical application is a blocking operation. This is especially problematic if your program is event driven as you can cause the run loop to stall while waiting for a response. <a href="/projects/rubydns">RubyDNS</a> provides a fully featured asynchronous DNS resolver built on top of <a href="http://rubyeventmachine.com">EventMachine</a>, and can be used to minimise the latency of name resolution in your program.</p>
	
	<content:listing src="rubydns.txt" brush="ruby" />
	
	<p>In your own code you'd probably want to use the new <code class="syntax ruby">resolver.addresses_for</code> method which helpfully returns a list of addresses.</p>
	
	<h2>Why?</h2>
	
	<p>Event driving programming is pretty straight forward. You essentially have a loop that reads events and responds to them. Processing is kept to a minimum per cycle, otherwise the loop stalls and becomes unresponsive.</p>
	
	<p>Software that uses a network for communication typically relies on name resolution. In particular, <code class="syntax ruby">RubyDNS::Server</code> is primarily interested in two things - receiving incoming requests and sending out a response - and - sending out requests and waiting for a response.</p>
	
	<p>DNS resolution is one task that is typically done using operating system functions such as <code class="syntax c">gethostbyname</code> or <code class="syntax">getaddrinfo</code>. The main problem is that these functions cause your process to sleep until a result is available.</p>
	
	<p>(Have you ever noticed how sometimes in games, the entire game stalls when logging in or listing servers? This is very often due to name resolution latency affecting the main event loop)</p>
	
	<p>If RubyDNS uses these functions, no other events can be processed while we are waiting for the operating system to respond. In practice, this means that <code class="syntax ruby">RubyDNS::Server</code> may perform poorly if many people are using it simultaneously.</p>
	
	<p>To avoid these problems, RubyDNS recently introduced its own <code class="syntax ruby">RubyDNS::Resolver</code> which provides robust asynchronous DNS resolution built on top of EventMachine. This resolver isn't just for <code class="syntax ruby">RubyDNS::Server</code> though, it can be used in any EventMachine event driven code that wants high performance name resolution.</p>
	
	<h2>Implementation</h2>
	
	<p>Given a request, which consists of one or more DNS questions, our resolver firstly checks whether UDP is a suitable transport. DNS packets are typically routed over UDP but if the packet is too big it should use TCP:</p>
	
	<content:listing brush="ruby" src="udp.rb"/>
	
	<p>With this list of candidates, we connect to each one and send the request. In all failure cases, we try the next server if one is available, otherwise if no servers have been successful we signal a resolution failure:</p>

	<content:listing brush="ruby" src="try.rb"/>
	
	<p>We then wait until EventMachine tells us one of two things: some response was received or there was a timeout. If we receive a response, as long as it wasn't truncated, we are successful:</p>
	
	<content:listing brush="ruby" src="response.rb"/>
	
	<p>In practice, we use <code class="syntax ruby">EventMachine::Deferrable</code> to handle this signalling. Using deferrables ultiamtely led to concise and reliable code and I was very happy with the results. I'd recommend taking a look at the <a href="https://github.com/ioquatix/rubydns/blob/master/lib/rubydns/resolver.rb">full source code</a>.</p>
</content:entry>