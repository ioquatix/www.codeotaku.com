<content:entry>
	<p>Applications that process many simultaneous requests are an area where Ruby struggles. The traditional request-per-process/thread model does not scale well. Explicit concurrency, including promises/futures, impose a significant cognitive burden and their use pollutes code all the way up the call chain. We present <a href="https://github.com/socketry/async">async</a>, a gem for Ruby that implements the reactor pattern using stackful coroutines (fibers). We discuss asynchronous programming models, touch briefly on the state of asynchronous programming in Ruby, and show how fibers can be a excellent model for concurrency.</p>
	
	<h2 id="asynchronous-programming">What is asynchronous programming?</h2>
	
	<p>A computer program is defined by a set of operations. A synchronous program is one where these operations happen one after the other. The completion of one operation preceeds the start of the next. Synchronous programs will incur latency equal to the sum of all the operations.</p>
	
	<p>If a program can be broken up into a series of operations that can be executed independently, it can be considered asynchronous. The completion of some operations can happen independently of others. Asynchronous programs can improve processor utilization, increasing throughput and lowering latency.</p>
	
	<p>Modern computers utilize both concurrency and parallelism to execute computer programs asynchronously. These concepts are used to describe how operations are scheduled and executed on the computer's processors.</p>
	
	<blockquote><p class="spoken">Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.</p><cite>Rob Pike</cite></blockquote>
	
	<h3 id="parallel-programs">Parallel Programs</h3>
	
	<p>Parallel programs are those that execute tasks simulateously on multiple processors, typically using processes or threads. Parallel programs are good for CPU-bound workloads because tasks can be executed on independent processors at full speed with minimal contention.</p>
	
	<figure class="diagram">
		<img width="20%" src="Eating-Dog.svg" />
		<img width="20%" src="Eating-Dog.svg" />
		<img width="20%" src="Eating-Dog.svg" />
		<img width="20%" src="Eating-Dog.svg" />
		<figcaption>Each dog has it's own dog bowl. They can all eat at the same time.</figcaption>
	</figure>
	
	<h3 id="concurrent-programs">Concurrent Programs</h3>
	
	<p>Concurrent programs interleave task execution on a single processor, typically by cooperative or preemptive scheduling. Concurrent programs are good for IO-bound workloads because tasks share the processor while they are waiting on high-latency IO operations.</p>
	
	<figure class="diagram">
		<img width="20%" src="Eating-Dog.svg" />
		<img width="20%" src="Sitting-Dog.svg" />
		<img width="20%" src="Sitting-Dog.svg" />
		<img width="20%" src="Sitting-Dog.svg" />
		<figcaption>There is one bowl for all the dogs. They take turns eating as needed.</figcaption>
	</figure>
	
	<h2>What makes asynchronous programs slow?</h2>
	
	<p>In an ideal world, asynchronous programs run at full speed on as many processors as you have; tasks are scheduled and executed as rapidly as possible. Tasks that depend on external state (e.g. disk IO) have to wait for data to become available. We refer to this as <strong>blocking</strong> due to <strong>contention</strong>. This can occur in several ways:</p>
	
	<ul>
		<li>If you have more tasks than processors, you have CPU contention.</li>
		<li>If you are waiting on disk IO operations, you have disk contention.</li>
		<li>If you are waiting on network operations, you have network contention.</li>
		<li>If you have multiple tasks trying to modify shared resource, you have resource contention.</li>
	</ul>
	
	<p>In general, contention increases latency and decreases throughput. Sometimes it's unavoidable. Sometimes you can mitigate contention by pre-fetching required information. However, even down to the CPU instructions, there can be contention (e.g. on shared L3 cache).</p>
	
	<p>If you can schedule another task to run, you can minimise the effect of the blocking operations on other tasks, thereby reducing overall latency and increasing throughput. Hyper-threading, which operates at the CPU level, is one technique that CPU designers use to increase throughput at the expense of latency (due to context switching on the CPU core).</p>
	
	<h2>What is the Reactor pattern?</h2>
	
	<p>The <a href="https://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</a> is simply a way of scheduling blocking operations so that other tasks can run concurrently. Typically, an operation fails because it would block (e.g. <code class="syntax clang">read()</code> fails with <code class="syntax clang">EWOULDBLOCK</code>). We schedule the file descriptor into an event polling mechanism (e.g. <code>select</code>, <code>epoll</code> or <code>kqueue</code>) and suspend the caller. When the operation is ready to continue, the caller is resumed. In some systems, you provide a callback, in other systems, you can use stackless or stackful coroutines to manage state.</p>
	
	<p>Async uses stackful coroutines, otherwise known as fibers (similar to green threads). Fibers allow us to use normal function, loops and conditionals to execute our program. When an operation would block, we yield the fiber back to the reactor, which will resume from that point when the operation can continue. In the mean time, other tasks can execute. Because no new syntax required for blocking operations (they are just normal function calls), it's possible for existing code to work in a reactor with no modifications; we can also avoid callback hell, a problem associated with more explicit forms of concurrency.</p>
	
	<p>Typical reactors handle blocking IO and timers. Some operations don't have non-blocking operating system level interfaces (e.g. <code class="syntax clang">gethostbyname()</code>), and in that case you need to use thread pools or other concurrency primatives. For the most part these can be implemented cleanly with non-blocking interfaces.</p>
	
	<h2>State of Ruby in 2018</h2>
	
	<p>Ruby (the interpreter) has a global interpreter lock which ensures that only one line of Ruby is executing at any time within a single Ruby process. Even if you have multiple threads, you can't execute Ruby code in parallel without multiple processes. Some specific parts of the interpreter give up this lock when executing blocking system calls, which allows other Ruby threads to execute. The implication of this is that a <a href="../improving-ruby-concurrency/index#performance">multi-process design has better throughput and lower latency than multi-thread</a>.</p>
	
	<p>Ruby (the standard library) has a frustrating IO model:</p>
	
	<ul>
		<li>It has a mixture of blocking and non-blocking operations, e.g.
			<ul>
				<li><a href="https://github.com/socketry/async-io/blob/55662bf3e2fbf9b076429b21add6f1a01ca3b990/lib/async/io/udp_socket.rb#L37-L38">UDPSocket#send</a></li>
				<li><a href="https://github.com/socketry/async-io/blob/55662bf3e2fbf9b076429b21add6f1a01ca3b990/lib/async/io/tcp_socket.rb#L38-L46">TCPSocket.new</a></li>
				<li><a href="http://ruby-doc.org/stdlib-2.5.0/libdoc/openssl/rdoc/OpenSSL/SSL/SSLServer.html#method-i-accept">SSLServer.accept</a></li>
				<li><a href="https://github.com/socketry/async-io/blob/fa3d3e4beee0c82444c34d6f061e1076f900b279/lib/async/io/unix_socket.rb#L26-L27">UNIXSocket#send_io, #recv_io, #recvfrom</a></li>
			</ul>
		</li>
		<li>A variety of <code class="syntax ruby">Socket</code> and Socket-like classes with slightly different method signatures, e.g.
			<ul>
				<li><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/socket/rdoc/Socket.html#method-i-recvfrom">Socket#recvfrom</a></li>
				<li><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/socket/rdoc/IPSocket.html#method-i-recvfrom">IPSocket#recvfrom</a></li>
				<li><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/socket/rdoc/UNIXSocket.html#method-i-recvfrom">UNIXSocket#recvfrom</a></li>
			</ul>
		</li>
		<li>Large surface area for basic operations, some of which may or may not use internal buffering, e.g. <code>pread, read, recv, sysread, readpartial, sync=, fsync, flush, close</code>. There is no general buffering implementation, and so it gets reinvented, e.g.
			<ul>
				<li><a href="https://github.com/socketry/async-io/blob/master/lib/async/io/stream.rb">Async::IO::Stream</a></li>
				<li><a href="http://ruby-doc.org/stdlib-2.5.0/libdoc/openssl/rdoc/OpenSSL/Buffering.html">OpenSSL::Buffering</a></li>
				<li><a href="https://github.com/celluloid/celluloid-io/blob/master/lib/celluloid/io/stream.rb">Celluloid::IO::Stream</a></li>
			</ul>
		</li>
		<li>Many different places where blocking DNS resolution can occur. Many networking classes take strings for addresses which are resolved internally with blocking DNS, e.g.
			<ul>
				<li><a href="http://ruby-doc.org/stdlib-2.5.0/libdoc/socket/rdoc/TCPSocket.html#method-c-new">TCPSocket#new</a></li>
				<li><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/socket/rdoc/Socket.html#method-i-recvfrom">Socket#recvfrom</a></li>
			</ul>
		</li>
		<li>At least <a href="https://github.com/socketry/async-io/blob/02a051bb638b40aa49c3cd322ec09b719a30158a/lib/async/io/generic.rb#L96-L153">3 different ways to invoke non-blocking behavior</a>, the oldest of which destroyed VM performance.</li>
		<li>JRuby doesn't support the standard UNIX socket model due to limitations of the JVM and doesn't implement the same methods as MRI.</li>
	</ul>
	
	<h2>The future for an asynchronous Ruby</h2>
	
	<p>It's clear at this point that Ruby has a complex legacy. However, going forward, Ruby needs a vision for a future that makes it easy for users to write efficient asynchronous programs. There are many aspects to this problem, but one core issue is providing an interface on which IO operations can work asynchronously.</p>
	
	<p>Ruby already has support for Fibers, which make cooperative scheduling trivial. All that's needed is an interface for waiting on blocking operations. There are many kinds of blocking operations, but the main ones are IO related. Most other blocking operations can be turned into IO operations by using threads and pipes. The "reactor" or "selector" is a common design pattern, where one can register IO of interest and then receive notifications when the IO is ready to be read/write from.</p>
	
	<p>Fortunately, we already have a very stable implementation of <a href="https://github.com/socketry/nio4r">the lowest level</a>. All that's required is calling <code class="syntax ruby">Fiber.yield</code> and <code class="syntax ruby">fiber.resume</code> at the right time. We've <a href="../improving-ruby-concurrency/index">made a proposal</a> to implement such hooks into the existing Ruby implementation and we'd love your feedback.</p>
	
	<h2>An overview of Async</h2>
	
	<p>We actually have a working implementation of the above proposal using wrappers. The <a href="https://github.com/socketry/async">async</a> gem provides a stable implementation of a concurrent IO reactor. It provides cooperatively scheduled tasks which yield when an operation would block. It doesn't monkey patch Ruby's standard library (althought perhaps we should), but provides wrappers which in some cases can be used transparently.</p>
	
	<p>The reactor and all it's tasks are contained entirely within one thread, which avoids any locking or inter-thread communication which can be a significant overhead in per-process reactor designs. It also avoids typical shared state synchronisation issues between tasks since only one is executing at a given time.</p>
	
	<p>Nested tasks implicity manage resources. If a task makes several HTTP requests, but is soon cancelled, all nested tasks will also be cancelled. This ensures that complex asynchronous processes can be managed with ease and with guaranteed invariants.</p>
	
	<p>Tasks themselves yield when operations would block, and this is completely transparent to the caller, unlike async/await style concurrency (which includes promises/futures). This avoids the implementation details of concurrency bleeding into otherwise understandable synchronous code, and allows previously synchronous code to become (within limitations of the Ruby API) transparently asynchronous.</p>
	
	<h2>Practical implementation with Async</h2>
	
	<p>We have enjoyed implementing a wide varity of asynchronous programs with Ruby. It's truely a pleasure and the performance is very encouraging.</p>
	
	<ul>
		<li><a href="https://github.com/socketry/async">Async</a> provides a reactor, the task structure and a generic IO wrapper. This core gem has a small surface area by design.</li>
		
		<li><a href="https://github.com/socketry/async-io">Async::IO</a> provides IO wrappers which in many cases are a drop-in replacements for the Ruby standard library. It is likely that the design of this gem will continue to evolve.</li>
		
		<li><a href="https://github.com/socketry/async-container">Async::Container</a> provides policy driven concurrency for servers. You write your server function, and you deploy it on as many threads or processes as you have available.</li>
		
		<li><a href="https://github.com/socketry/async-dns">Async::DNS</a> provides both DNS resolver (client) and server. It's the guts of <a href="https://github.com/socketry/rubydns">RubyDNS</a>.</li>
		
		<li><a href="https://github.com/socketry/async-http">Async::HTTP</a> provides both HTTP(S) client and server, with experimental support for HTTP/2.</li>

		<li><a href="https://github.com/socketry/async-websocket">Async::WebSocket</a> provides a <a href="https://github.com/socketry/async-websocket#usage">simple example client/server</a> and is a good place to start if you'd just like to try something out.</li>
		
		<li><a href="https://github.com/socketry/async-postgres">Async::Postgres</a> and <a href="https://github.com/socketry/async-mysql">Async::MySQL</a> provide asynchronous connection adapters for ActiveRecord. It must be used with the <a href="https://github.com/socketry/falcon">falcon</a> web server. It's a bit of an experiment to see what's possible.</li>
		
		<li><a href="https://github.com/socketry/async-await">Async::Await</a> transparently wraps your code and makes it asynchronous. It's magic.</li>
	</ul>
	
	<p>Here is an example of non-blocking Ruby using <code>async-await</code>:</p>
	
	<content:listing src="chickens.rb" lang="ruby" />
	
	<p>We look forward to a future where such a model can be brought to all of Ruby.</p>
</content:entry>