<content:entry>
	<p>This month <a href="https://github.com/ioquatix?tab=overview&amp;from=2019-12-01&amp;to=2019-12-31">has been productive</a>. I have been recovering from 6 weeks of travelling in Japan and been focusing more on commercial work.</p>
	
	<h2>Ruby 2.7</h2>
	
	<p>The release of Ruby 2.7 included performance improvements to thread allocation, reduced memory usage for threads and fibers, and significantly reduced overhead for fiber reuse. I am now implementing improvements to the underlying I/O subsystem, including <a href="https://github.com/ruby/ruby/pull/1870">hooks for concurrency</a> which can be easily implemented across all major implementations of Ruby.</p>
	
	<h2>Falcon</h2>
	
	<p>While I haven't had as much time to dedicate to falcon as I wanted, I have been receiving a lot of feedback which has helped me shape the design of the server. Within the next month, I hope to release <code>falcon host</code> which will be the first official mechanism for production deployment. This will hopefully include support for application preloading and I'm also considering options for an internal watchdog task to better manage server reliability and latency.</p>
	
	<p>If you are a company and you are interested in trying falcon, please feel free to <a href="mailto:samuel@oriontransfer.net">get in touch</a> if you want to work together on a project.</p>
	
	<h2>Process Metrics</h2>
	
	<p>We recently migrated <a href="https://rubyapi.org">RubyAPI.org</a> to use Falcon. It runs inside Heroku and initially we had some memory usage issues, because Falcon would fork one process per CPU core, which would quickly exceed the Heroku memory limit. As a consequence, I started experimenting with a code preloading within Falcon and looking at how it affected memory usage.</p>
	
	<p>Traditional reporting of memory usage does not accurately capture real memory usage when considering multiple processes which have shared memory regions. Proportional set size (PSS) is a measurement of shared pages, divided by the number of processes sharing those pages, so more accurately represents actual memory usage, especially when summing the memory usage of multiple processes. Understanding both PSS, and unique set size (USS) is critical to understanding how falcon is using memory and whether preload is reducing memory bloat.</p>
	
	<p>Linux provides <code>/proc/&lt;pid&gt;/smaps</code> which includes all the metrics required to compute the PSS and USS for a given set of processes, but it is non-trivial. In addition, I wanted to try and capture similar statistics from Darwin. So, I have been building the <a href="https://github.com/socketry/process-metrics">process-metrics</a> gem, which provides all this information. The interface is still very immature and will likely change, but I've already integrated it into the falcon supervisor so you can pull this data from a running host.</p>
	
	<p>Hopefully we can build this into a more elaborate report within Falcon in the future, and use it to drive the development of code preloading mechanisms which reduce the cost of production deployments.</p>
	
	<h2>Faraday</h2>
	
	<p>I recently <a href="https://github.com/lostisland/faraday/pull/1091">added support for persistent connections</a> to Faraday, which when backed by <a href="https://github.com/socketry/async-http-faraday">async-http-faraday</a>, provides persistent HTTP/1.1 and HTTP/2.0 connections. This allows existing code built on top of Faraday to scale better when used with <a href="https://github.com/socketry/async">async</a>.</p>
	
	<h2>Async::Pool</h2>
	
	<p>I recently released <a href="https://github.com/socketry/async-pool">async-pool</a>, a gem which extracts the pool implementations from <a href="https://github.com/socketry/async-redis">async-redis</a> and <a href="https://github.com/socketry/async-http">async-http</a>. It provides support for multiplexed client resources (or singleplex if you set concurrency to 1), and will serve as a useful foundation for other client implementations, including several new async-safe database adapters which are in the works.</p>
	
	<h2>Programming Language Posters</h2>
	
	<p>We recently released updated <a href="https://github.com/ioquatix/computer-science-posters/tree/master/programming-language-posters">programming language posters</a>. This free set of posters implemens the Fizz Buzz game in 13 different languages, and was designed for use in schools and universities to bring awareness to different progrmaming languages and help people overcome internal biases towards specific languages.</p>
	
	<h2>Sponsorship</h2>
	
	<p>This work is supported by my <a href="https://github.com/sponsors/ioquatix">GitHub sponsors</a>. If you are a company and you depend on Ruby, I invite you to support my work. I also provide commercial support agreements and contracting for businesses that want to improve their infrastructure using <a href="https://github.com/socketry/falcon">Falcon</a> and <a href="https://github.com/socketry/async">Async</a>.</p>
</content:entry>