<content:entry>
	<p>The past two months <a href="https://github.com/ioquatix?tab=overview&amp;from=2020-02-01&amp;to=2020-03-31">have been busy</a>. In New Zealand, we are in lockdown, so I have been adapting my work schedule and family life. Feel free to contact me if you would like to do some peer programming.</p>
	
	<h2>Falcon</h2>
	
	<p>Falcon virtual is now running in production, hosting this site and several others for the past month. Real internet traffic has provided useful data, allowing me to improve HTTP/2 flow control and general throughput.</p>
	
	<figure>
		<img src="2020-04-10_16-46.png" />
	</figure>
	
	<p>As falcon virtual acts as a load balancer, it also terminates SSL. It gets an <a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.codeotaku.com">A rating</a> out of the box. With the next release of the OpenSSL gem, we should be able to support TLS 1.3 natively which will improve</p>
	
	<content:youtube-video id="zvWgPIBgbis" />
	
	<h3>Async::HTTP::Cache</h3>
	
	<p>In order to support the same amount of traffic as nginx, which has it's own internal cache, I implemented <a href="https://github.com/socketry/async-http-cache">async-http-cache</a>. It can be used both as a server side and client side cache, and can be easily added to falcon.</p>
	
	<h2>Bake</h2>
	
	<p>After repeatedly implementing the same patterns with rake over and over again, and still running into limitations, I decided to create <a href="https://github.com/ioquatix/bake">Bake</a>. It improves in several key areas, including on-demand loading of tasks, argument handling, task documentation and gem integration.</p>
	
	<p>Bake already integrates with several of my other gems, including <a href="https://github.com/socketry/console/blob/master/bake/console.rb">console</a>, <a href="https://github.com/socketry/variant/blob/master/bake/variant.rb">variant</a> and <a href="https://github.com/socketry/async-http/blob/master/bake/async/http.rb">async-http</a> to name a few.</p>
	
	<content:youtube-video id="cFWIy47ITFY" />
	
	<h3>Bake Bundler</h3>
	
	<p>Releasing gems can now be done using <a href="https://github.com/ioquatix/bake-bundler">bake-bundler</a> which removes the need for rake in the vast majority of the gems I maintain. In addition to the standard installation and release tasks, it can also automaticlly bump the version number which is convenient.</p>
	
	<h2>Variant</h2>
	
	<p>After spending time working on <a href="https://github.com/rack/rack">Rack</a>, I came to the conclusion that the way we specify "environments" lacks consistency. In particular, <code>RACK_ENV</code> is often misused and misunderstood (even in my own code). The relationship between <code>RACK_ENV</code> and <code>RAILS_ENV</code> (and others) is poorly specified. I decided to create <a href="https://github.com/socketry/variant">variant</a>, a gem which documents and supports the <code>VARIANT</code> environment variable.</p>
	
	<p>In terms of <code>falcon</code>, deployment into production is simpler, because setting <code>VARIANT=production</code> is framework agnostic. Of course, it will depend on individual frameworks and tools taking advantage of it, and I hope with time they will.</p>
	
	<h2>Thread::Local</h2>
	
	<p>Falcon introduces isolated multi-process and multi-thread execution models. Global mutable state bypasses these boundaries, sometimes with unpredictable results, so I created the <a href="https://github.com/socketry/thread-local">thread-local</a> gem which standardises the construction of thread-local instances.</p>
	
	<p>Thread-local instances are completely isolated and thus don't attract the same thread-safety issues that might occur with globally shared state. In addition, falcon running in multi-thread mode may restart threads which suffer critical failures. By using thread-local state, any state that caused the application to fail will be discarded too.</p>
	
	<h2>Thread Safety</h2>
	
	<p>One of my goals is to bring attention to thread safety issues that exist in Ruby code. As we look forward to improved parallelism and concurrency with Ruby 3, understanding where we currently lack thread safety will help inform and jusitfy the decisions we are making for Ruby 3.</p>
	
	<content:youtube-video id="Wu9LRNOc5pQ" />
	
	<h3>Lazy Mutex Initialization</h3>
	
	<p>One problem that is both fairly common and easily identifiable by automated analysis, is lazy mutex initialization. Using <a href="https://github.com/ioquatix/presentations/tree/master/asynchronous-ruby-2019/scraper">this gem source code "analysis" tool</a> we identified many issues:</p>
	
	<ul>
		<li><a href="https://github.com/BallAerospace/COSMOS/pull/1145">BallAerospace/COSMOS</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/soveran/ohm/pull/242">soveran/ohm</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/ruby-amqp/amqp/pull/242">ruby-amqp/amqp</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/sinatra/mustermann/pull/107">sinatra/mustermann</a> – Lazy mutex initialization?</li>
		<li><a href="https://github.com/fog/fog-aws/pull/553">fog/fog-aws</a> – Lazy mutex initialization and data race.</li>
		<li><a href="https://github.com/castwide/backport/pull/3">castwide/backport</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/castwide/solargraph/pull/299">castwide/solargraph</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/cucumber/cucumber-ruby/pull/1403">cucumber/cucumber-ruby</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/lostisland/faraday/pull/1136">lostisland/faraday</a> – Data race.</li>
		<li><a href="https://github.com/famoseagle/carrot/pull/13">famoseagle/carrot</a> – Lazy mutex initialization.</li>
		<li><a href="https://github.com/marcmo/cxxproject/pull/132">marcmo/cxxproject</a> – Lazy mutex initialization.</li>
	</ul>
	
	<content:youtube-video id="kU6SReIz5lc" />
	
	<p>In addition, I've made a proposal to support <a href="https://github.com/lsegal/yard/issues/1311">a standardised documentation tag for reentrant behaviour</a>. While this doesn't impact actual code, it could assist with code analysis.</p>
	
	<h3>GitHub Changelog Generator</h3>
	
	<p>For a while, I have been experimenting with taking existing code bases, and retrofitting async in order to improve concurrency. One recent example is <a href="https://github.com/github-changelog-generator/github-changelog-generator/pull/784/files">PR #784</a> to GitHub Changelog Generator.</p>
	
	<h2>Native Coroutines</h2>
	
	<p>After some remote "back-to-back" debugging, the <a href="https://github.com/ruby/ruby/pull/2995">ARMv7 coroutine implementation is finally working and enabled by default</a>. It turned out to be a code alignment issue. This now means Ruby running on the Raspberry Pi and other 32-bit ARM processors uses native coroutines which improves performance. Thanks to <a href="https://github.com/paullj1">Paul Jordan</a> for bringing this across the finishing line.</p>
	
	<content:sponsorship/>
</content:entry>