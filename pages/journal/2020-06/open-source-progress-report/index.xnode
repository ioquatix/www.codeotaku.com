<content:entry>
	<p>The past two months <a href="https://github.com/ioquatix?tab=overview&amp;from=2020-04-01&amp;to=2020-05-31">have been busy</a>. In New Zealand, we have just come out of lockdown, and things are slowly starting to return to "normal"...</p>
	
	<h2>Light Weight Per-Thread Fiber Scheduler</h2>
	
	<p>The <a href="https://bugs.ruby-lang.org/issues/16786">proposal</a> was recently accepted by Matz for experimentation and the <a href="https://github.com/ruby/ruby/pull/3032">CRuby implementation was merged</a>. The interface provides a transparent bridge between native Ruby I/O and an underlying event loop, like that provided by <a href="https://github.com/socketry/async/blob/scheduler/lib/async/scheduler.rb">Async</a>. Between now and the release of Ruby 3, we need as much feedback on this interface as possible.</p>
	
	<h3>Async::Scheduler</h3>
	
	<p>Async provides a <a href="https://github.com/socketry/async/blob/scheduler/lib/async/scheduler.rb">scheduler implementation</a> which conforms to the requirements of the proposal. It allows you to use native Ruby I/O in an event driven fashion. You can see some examples in the <a href="https://github.com/socketry/async/blob/scheduler/spec/async/scheduler_spec.rb">specs</a>.</p>
	
	<content:listing src="scheduler.rb" lang="ruby"/>
	
	<h2>Socketry.io</h2>
	
	<p><a href="https://socketry.io">Socketry.io</a> is an initiative to build a sustainable open source model for the <a href="https://github.com/socketry">Socketry organsation</a> and all the related gems. Initially, we are offering a premium subscription model for the <a href="https://github.com/socketry/falcon">Falcon application server</a>. Looking forward, we plan on adding long-term support releases including exclusive access to backported bug fixes, advance notice of security issues, and other business-specific requirements. If you have a business that depends on Falcon, now is a great time to get involved and support its future!</p>
	
	<h2>Utopia Project</h2>
	
	<p>"How can I solve my problem with this library of code?" is the most important question that documentation needs to answer. But existing documentation tools often fail to provide the structure and organisation required for new users. <a href="https://github.com/socketry/utopia-project">Utopia Project</a> provides task-centric documentation, cross-referenced with source code, and will be used as a starting point to rethink and improve the development experience.</p>
	
	<p>I've already started rolling this out accross several projects:</p>
	
	<ul>
		<li><a href="https://socketry.github.io/falcon/">Falcon</a></li>
		<li><a href="https://socketry.github.io/utopia-project/">Utopia::Project</a></li>
		<li><a href="https://ioquatix.github.io/decode/">Decode</a></li>
	</ul>
	
	<h3>Decode</h3>
	
	<p>In order to support the rich cross-referencing required by Utopia Project, I created <a href="https://github.com/ioquatix/decode">Decode</a>. It can quickly generate an index of Ruby source code using the <a href="https://github.com/whitequark/parser">parser</a> gem, and can resolve symbols in source code comments and embedded in markdown easily.</p>
	
	<p>As a general framework for source code analysis, its fairly abstract and in the future I hope to extend it to index C and C++ code, which is useful for handling native extensions.</p>
	
	<figure>
		<img src="preview.png" />
	</figure>
	
	<h3>Markly</h3>
	
	<p>Wrangling with Markdown documents is non-trivial, but the <a href="https://github.com/commonmark/cmark">cmark</a> implementation provides a full abstract syntax tree (AST) for reading, processing and generating documents. I made a fork of <a href="https://github.com/gjtorikian/commonmarker">CommonMarker</a> after wrangling with <a href="https://github.com/gettalong/kramdown">Kramdown</a>. My primarily motivation was to improve the interface for document manipulations and rewriting. Utopia::Project uses this interface for processing source code comments, as well as rewriting the README, extracting the title of the document for the page title, etc.</p>
	
	<content:listing src="markly.rb" lang="ruby"/>
	
	<h2>Turbo Test</h2>
	
	<p><a href="https://github.com/ioquatix/turbo_test">Turbo Test</a> (working title) is a new collaboration between myself and <a href="https://github.com/SamSaffron">Sam Saffron</a> to improve the parallelism of the RSpec tests within Discord. I've already created a small proof of concept task runner using <a href="https://github.com/socketry/async-container/blob/master/examples/queue/server.rb">Async::Container</a> and preliminary results are promising.</p>
	
	<p>We aim to have a working prototype within the next month. If you are a business that would benefit from such a tool, please help to accelerate its development by <a href="https://github.com/sponsors/ioquatix">sponsoring my work</a>.</p>
	
	<content:sponsorship/>
</content:entry>